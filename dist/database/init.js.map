{"version":3,"sources":["../../server/database/init.js"],"names":["mongoose","Promise","global","connect","maxConnectTimes","resolve","reject","process","env","set","mongodb","db","useNewUrlParser","connection","on","Error","err","once","console","log","iniSchema","glob","sync","__dirname","forEach","require","Administrators","model"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAEAA,mBAASC,OAAT,GAAiBC,OAAOD,OAAxB;AACA,IAAME,UAAU,SAAVA,OAAU,GAAM;AACd,QAAIC,kBAAgB,CAApB;AACA,WAAO,sBAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACjC,YAAGC,QAAQC,GAAR,IAAa,YAAhB,EACA;AACIR,+BAASS,GAAT,CAAa,OAAb,EAAqB,IAArB;AACH;AACDT,2BAASG,OAAT,CAAiBO,eAAQC,EAAzB,EAA6B,EAACC,iBAAiB,IAAlB,EAA7B;AACAZ,2BAASa,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAsC,YAAI;AACtCV;AACA,gBAAGA,kBAAgB,CAAnB,EACA;AACIJ,mCAASG,OAAT,CAAiBO,eAAQC,EAAzB,EAA6B,EAACC,iBAAiB,IAAlB,EAA7B;AACH,aAHD,MAKA;AACI,sBAAM,IAAIG,KAAJ,CAAU,WAAV,CAAN;AACH;AACJ,SAVD;AAWAf,2BAASa,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAA+B,UAACE,GAAD,EAAO;AAClCZ;AACA,gBAAGA,kBAAgB,CAAnB,EACA;AACIJ,mCAASG,OAAT,CAAiBO,eAAQC,EAAzB,EAA6B,EAACC,iBAAiB,IAAlB,EAA7B;AACH,aAHD,MAKA;AACI,sBAAM,IAAIG,KAAJ,CAAU,WAAV,CAAN;AACH;AACJ,SAVD;AAWAf,2BAASa,UAAT,CAAoBI,IAApB,CAAyB,MAAzB,EAAgC,YAAI;AAChCb,8BAAgB,CAAhB;AACAC,oBAAQ,MAAR;AACAa,oBAAQC,GAAR,CAAY,+BAAZ;AACH,SAJD;AAKH,KAjCM,CAAP;AAkCP,CApCD;;AAsCA,IAAMC,YAAY,SAAZA,SAAY,GAAI;AAClBC,mBAAKC,IAAL,CAAU,mBAAQC,SAAR,EAAmB,UAAnB,EAA+B,SAA/B,CAAV,EAAqDC,OAArD,CAA6DC,OAA7D;AACA,QAAMC,iBAAiB1B,mBAAS2B,KAAT,CAAe,gBAAf,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAEF,CAbD;;QAgBIxB,O,GAAAA,O;QACAiB,S,GAAAA,S","file":"init.js","sourcesContent":["import mongoose from 'mongoose' \r\nimport { mongodb } from '../config/index'\r\nimport glob from 'glob'\r\nimport { resolve } from 'path'\r\n\r\nmongoose.Promise=global.Promise\r\nconst connect = () => {\r\n        let maxConnectTimes=0\r\n        return new Promise((resolve,reject)=>{\r\n            if(process.env!='production')\r\n            {\r\n                mongoose.set('debug',true)\r\n            }\r\n            mongoose.connect(mongodb.db, {useNewUrlParser: true})\r\n            mongoose.connection.on('disconnected',()=>{\r\n                maxConnectTimes++\r\n                if(maxConnectTimes<5)\r\n                {\r\n                    mongoose.connect(mongodb.db, {useNewUrlParser: true})\r\n                }\r\n                else\r\n                {\r\n                    throw new Error('数据库挂了，请维修')\r\n                }\r\n            })\r\n            mongoose.connection.on('error',(err)=>{\r\n                maxConnectTimes++\r\n                if(maxConnectTimes<5)\r\n                {\r\n                    mongoose.connect(mongodb.db, {useNewUrlParser: true})\r\n                }\r\n                else\r\n                {\r\n                    throw new Error('数据库挂了，请维修')\r\n                }\r\n            })\r\n            mongoose.connection.once('open',()=>{\r\n                maxConnectTimes=0\r\n                resolve('连接成功')\r\n                console.log('Mongodb connected succsefully')\r\n            })\r\n        })       \r\n}\r\n\r\nconst iniSchema = ()=>{\r\n    glob.sync(resolve(__dirname, './schema', '**/*.js')).forEach(require)\r\n    const Administrators = mongoose.model(\"Administrators\");\r\n    // const administrators = new Administrators({\r\n    //     username: '李',\r\n    //     password: '123',\r\n    //     email:'22116728@qq.com'\r\n    // });\r\n    // Administrators.comparePassword('123','$2b$10$/hu2sJVUY16DPtXaZA0lR.jiIpHOMMmUioDFMs.19XtXKmmKyjROS').then(function(data){\r\n    //     console.log(data)\r\n    // })\r\n   // console.log(Administrators)\r\n    \r\n}\r\n\r\nexport {\r\n    connect,\r\n    iniSchema\r\n}"]}