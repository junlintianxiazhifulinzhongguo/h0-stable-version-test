{"version":3,"sources":["../../../server/database/schema/administrators.js"],"names":["Schema","mongoose","Mixed","Types","SALT_WORK_FACTOR","MAX_LOGIN_ATTEMPTS","LOCK_TIME","administratorsSchema","username","require","unique","type","String","email","password","alipayUserId","default","loginAttempts","Number","lockUntil","timestamps","createdAt","updatedAt","virtual","get","Date","now","pre","next","isModified","bcrypt","genSalt","err","salt","hash","error","console","log","methods","comparePassword","_password","resolve","reject","compare","isMatch","incLoginAttepts","user","update","$set","updates","$inc","isLocked","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,SAAOC,mBAASD,MAAtB;AACA,IAAME,QAAMF,OAAOG,KAAP,CAAaD,KAAzB;AACA,IAAME,mBAAiB,EAAvB;AACA,IAAMC,qBAAmB,CAAzB;AACA,IAAMC,YAAU,IAAE,EAAF,GAAK,EAAL,GAAQ,IAAxB;AACA,IAAMC,uBAAqB,IAAIP,MAAJ,CAAW;AAClCQ,cAAS;AACLC,iBAAQ,IADH;AAELC,gBAAO,IAFF;AAGLC,cAAKC;AAHA,KADyB;AAMlCC,WAAM;AACFJ,iBAAQ,IADN;AAEFC,gBAAO,IAFL;AAGFC,cAAKC;AAHH,KAN4B;AAWlCE,cAAS;AACLL,iBAAQ,IADH;AAELE,cAAKC;AAFA,KAXyB;AAelCG,kBAAa;AACTL,gBAAO,IADE;AAETC,cAAKC,MAFI;AAGTI,iBAAQ;AAHC,KAfqB;AAoBlCC,mBAAc;AACVR,iBAAQ,IADE;AAEVE,cAAKO,MAFK;AAGVF,iBAAQ;AAHE,KApBoB;AAyBlCG,eAAU;AACNV,iBAAQ,IADF;AAENE,cAAKO,MAFC;AAGNF,iBAAQ;AAHF;AAzBwB,CAAX,EA8BxB,EAAEI,YAAY,EAAEC,WAAW,YAAb,EAA2BC,WAAW,YAAtC,EAAd,EA9BwB,CAA3B;;AAkCAf,qBAAqBgB,OAArB,CAA6B,UAA7B,EAAyCC,GAAzC,CAA6C,YAAI;AAC7C,WAAO,UAAKL,SAAL,IAAkB,UAAKA,SAAL,GAAiBM,KAAKC,GAAL,EAA1C;AACH,CAFD;;AAKAnB,qBAAqBoB,GAArB,CAAyB,MAAzB,EAAgC,UAASC,IAAT,EAAc;AAAA;;AAC1C,QAAG,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAgC,OAAOD,MAAP;AAChCE,qBAAOC,OAAP,CAAe3B,gBAAf,EAAgC,UAAC4B,GAAD,EAAKC,IAAL,EAAY;AACxC,YAAGD,GAAH,EAAQ,OAAOJ,KAAKI,GAAL,CAAP;AACRF,yBAAOI,IAAP,CAAY,MAAKpB,QAAjB,EAA0BmB,IAA1B,EAA+B,UAACE,KAAD,EAAOD,IAAP,EAAc;AACzC,gBAAGC,KAAH,EAAU,OAAOP,KAAKO,KAAL,CAAP;AACVC,oBAAQC,GAAR,CAAY,MAAKvB,QAAjB;AACA,kBAAKA,QAAL,GAAcoB,IAAd;AACAE,oBAAQC,GAAR,CAAY,MAAKvB,QAAjB;AACAc;AACH,SAND;AAOH,KATD;AAUH,CAZD;AAaArB,qBAAqB+B,OAArB,GAA6B;AACzBC,qBAAgB,yBAACC,SAAD,EAAW1B,QAAX,EAAsB;AAClC,eAAO,sBAAY,UAAC2B,OAAD,EAASC,MAAT,EAAkB;AACjCZ,6BAAOa,OAAP,CAAeH,SAAf,EAAyB1B,QAAzB,EAAkC,UAACkB,GAAD,EAAKY,OAAL,EAAe;AAC7C,oBAAG,CAACZ,GAAJ,EAAQS,QAAQG,OAAR,EAAR,KACKF,OAAOV,GAAP;AACR,aAHD;AAIH,SALM,CAAP;AAMH,KARwB;;AAUzBa,qBAAgB,yBAACC,IAAD,EAAQ;AACpB,eAAO,sBAAY,UAACL,OAAD,EAASC,MAAT,EAAkB;AACjC,gBAAG,UAAKvB,SAAL,IAAkB,UAAKA,SAAL,GAAiBM,KAAKC,GAAL,EAAtC,EACA;AACI,0BAAKqB,MAAL,CAAY;AACRC,0BAAK;AACD/B,uCAAc,CADb;AAEDE,mCAAU;AAFT;AADG,iBAAZ,EAKE,eAAK;AACH,wBAAGa,GAAH,EAAQU,OAAOV,GAAP,EAAR,KACKS,QAAQ,IAAR;AACR,iBARD;AASH,aAXD,MAaA;AACG,oBAAIQ,UAAQ;AACRC,0BAAK;AACDjC,uCAAc;AADb;AADG,iBAAZ;AAKA,oBAAG,UAAKA,aAAL,GAAmB,CAAnB,IAAuBZ,kBAAvB,IAA6C,CAAC,UAAK8C,QAAtD,EACA;AACIF,4BAAQD,IAAR,GAAa;AACT7B,mCAAUM,KAAKC,GAAL,KAAWpB;AADZ,qBAAb;AAGH;AACD,0BAAKyC,MAAL,CAAYE,OAAZ,EAAoB,eAAK;AACrB,wBAAGjB,GAAH,EAAQU,OAAOV,GAAP,EAAR,KACKS,QAAQ,IAAR;AACR,iBAHD;AAIF;AACJ,SA/BM,CAAP;AAgCH;;AA3CwB,CAA7B;;AA+CAxC,mBAASmD,KAAT,CAAe,gBAAf,EAAgC7C,oBAAhC","file":"administrators.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport bcrypt from 'bcrypt'\r\nconst Schema=mongoose.Schema\r\nconst Mixed=Schema.Types.Mixed\r\nconst SALT_WORK_FACTOR=10\r\nconst MAX_LOGIN_ATTEMPTS=5\r\nconst LOCK_TIME=2*60*60*1000\r\nconst administratorsSchema=new Schema({\r\n    username:{\r\n        require:true,\r\n        unique:true,\r\n        type:String\r\n    },\r\n    email:{\r\n        require:true,\r\n        unique:true,\r\n        type:String\r\n    },\r\n    password:{\r\n        require:true,\r\n        type:String\r\n    },\r\n    alipayUserId:{\r\n        unique:true,\r\n        type:String,\r\n        default:''\r\n    },\r\n    loginAttempts:{\r\n        require:true,\r\n        type:Number,\r\n        default:0\r\n    },\r\n    lockUntil:{\r\n        require:true,\r\n        type:Number,\r\n        default:1\r\n    }\r\n}, { timestamps: { createdAt: 'created_at' ,updatedAt: 'updated_at' } })\r\n\r\n\r\n\r\nadministratorsSchema.virtual('isLocked').get(()=>{\r\n    return this.lockUntil && this.lockUntil > Date.now()\r\n})\r\n\r\n\r\nadministratorsSchema.pre('save',function(next){\r\n    if(!this.isModified('password'))return next()\r\n    bcrypt.genSalt(SALT_WORK_FACTOR,(err,salt)=>{\r\n        if(err) return next(err)      \r\n        bcrypt.hash(this.password,salt,(error,hash)=>{\r\n            if(error) return next(error)\r\n            console.log(this.password)\r\n            this.password=hash\r\n            console.log(this.password)\r\n            next()\r\n        })\r\n    })\r\n})\r\nadministratorsSchema.methods={\r\n    comparePassword:(_password,password)=>{\r\n        return new Promise((resolve,reject)=>{\r\n            bcrypt.compare(_password,password,(err,isMatch)=>{\r\n                if(!err)resolve(isMatch)\r\n                else reject(err)\r\n            })\r\n        }) \r\n    },\r\n\r\n    incLoginAttepts:(user)=>{\r\n        return new Promise((resolve,reject)=>{\r\n            if(this.lockUntil && this.lockUntil < Date.now())\r\n            {\r\n                this.update({\r\n                    $set:{\r\n                        loginAttempts:1,\r\n                        lockUntil:1\r\n                    }\r\n                },err=>{\r\n                    if(err) reject(err)\r\n                    else resolve(true)\r\n                })   \r\n            }\r\n            else\r\n            {\r\n               let updates={\r\n                   $inc:{\r\n                       loginAttempts:1\r\n                   }\r\n               }\r\n               if(this.loginAttempts+1>= MAX_LOGIN_ATTEMPTS && !this.isLocked)\r\n               {\r\n                   updates.$set={\r\n                       lockUntil:Date.now()+LOCK_TIME\r\n                   }\r\n               }\r\n               this.update(updates,err=>{\r\n                   if(err) reject(err)\r\n                   else resolve(true)\r\n               })\r\n            }\r\n        })      \r\n    }\r\n    \r\n}\r\n\r\nmongoose.model('Administrators',administratorsSchema)"]}